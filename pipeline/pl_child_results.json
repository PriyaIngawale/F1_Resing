{
	"name": "pl_child_results",
	"properties": {
		"activities": [
			{
				"name": "act_for_each_season_round",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "act_look_up_races",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('act_look_up_races').output.value[0].MRData.RaceTable.Races",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "act_cpy_round_result",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "act_log_insert_race_result",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"httpRequestTimeout": "00:01:40",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "GET",
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "ds_api_source",
									"type": "DatasetReference",
									"parameters": {
										"ds_param_file_name": {
											"value": "@concat(concat(concat(pipeline().parameters.season_year,'/'),item().round),'/results')\n\n",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_sink_json",
									"type": "DatasetReference",
									"parameters": {
										"ds_param_file_name": {
											"value": "@concat(concat(concat(pipeline().parameters.season_year,'_round_'),item().round),'.json')",
											"type": "Expression"
										},
										"ds_param_directory_path": {
											"value": "@concat('bronze/results/',formatDateTime(utcnow(),'yyyy-MM-dd'))",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "act_cpy_lap_timees",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "act_log_insert_lap_times",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "act_log_update_complete_race_result",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"httpRequestTimeout": "00:01:40",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "GET",
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "ds_api_source",
									"type": "DatasetReference",
									"parameters": {
										"ds_param_file_name": {
											"value": "@concat(concat(concat(pipeline().parameters.season_year,'/'),item().round),'/laps')\n\n",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_sink_json",
									"type": "DatasetReference",
									"parameters": {
										"ds_param_file_name": {
											"value": "@concat(concat(concat(pipeline().parameters.season_year,'_round_'),item().round),'.json')",
											"type": "Expression"
										},
										"ds_param_directory_path": {
											"value": "@concat('bronze/lap_times/',formatDateTime(utcnow(),'yyyy-MM-dd'))",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "act_cpy_pitstops",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "act_log_insert_pit_stops",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "act_log_update_complete_lap_times",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"httpRequestTimeout": "00:01:40",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "GET",
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "ds_api_source",
									"type": "DatasetReference",
									"parameters": {
										"ds_param_file_name": {
											"value": "@concat(concat(concat(pipeline().parameters.season_year,'/'),item().round),'/pitstops')\n\n",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_sink_json",
									"type": "DatasetReference",
									"parameters": {
										"ds_param_file_name": {
											"value": "@concat(concat(concat(pipeline().parameters.season_year,'_round_'),item().round),'.json')",
											"type": "Expression"
										},
										"ds_param_directory_path": {
											"value": "@concat('bronze/pitstops/',formatDateTime(utcnow(),'yyyy-MM-dd'))",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "act_cpy_qualifying",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "act_log_insert_qualifying",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "act_log_update_complete_pit_stops",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"httpRequestTimeout": "00:01:40",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "GET",
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "ds_api_source",
									"type": "DatasetReference",
									"parameters": {
										"ds_param_file_name": {
											"value": "@concat(concat(concat(pipeline().parameters.season_year,'/'),item().round),'/qualifying')\n\n",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_sink_json",
									"type": "DatasetReference",
									"parameters": {
										"ds_param_file_name": {
											"value": "@concat(concat(concat(pipeline().parameters.season_year,'_round_'),item().round),'.json')",
											"type": "Expression"
										},
										"ds_param_directory_path": {
											"value": "@concat('bronze/qualifying/',formatDateTime(utcnow(),'yyyy-MM-dd'))",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "act_log_insert_race_result",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": {
										"value": "insert into public.audit (job_name,task_name,status,start_date,end_date) values ('@{concat('lap_times',pipeline().parameters.season_year,'_',item().round)}','copy_act','In Progress','@{convertFromUtc(utcnow(),'India Standard Time')}','@{convertFromUtc(utcnow(),'India Standard Time')}');\n\nselect * from public.audit;",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_postgres",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "act_log_update_complete_race_result",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "act_cpy_round_result",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": {
										"value": "update public.audit\nset status='completed', \nend_date = start_date + interval '@{activity('act_cpy_round_result').output.copyDuration} seconds'\nwhere job_name = '@{concat('race_result',pipeline().parameters.season_year,'_',item().round)}';\n\n\nselect * from public.audit;",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_postgres",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "act_log_update_fail_race_result",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "act_cpy_round_result",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": {
										"value": "update public.audit\nset status='failed',\nend_date = start_date + interval '@{activity('act_cpy_round_result').output.copyDuration} seconds'\nwhere job_name ='@{concat('race_result',pipeline().parameters.season_year,'_',item().round)}';\n\n\nselect * from public.audit;",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_postgres",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "act_log_insert_lap_times",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": {
										"value": "insert into public.audit (job_name,task_name,status,start_date,end_date) values ('@{concat('lap_times',pipeline().parameters.season_year,'_',item().round)}','copy_act','In Progress','@{convertFromUtc(utcnow(),'India Standard Time')}','@{convertFromUtc(utcnow(),'India Standard Time')}');\n\nselect * from public.audit;",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_postgres",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "act_log_update_complete_lap_times",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "act_cpy_lap_timees",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": {
										"value": "update public.audit\nset status='completed', \nend_date = start_date + interval '@{activity('act_cpy_round_result').output.copyDuration} seconds'\nwhere job_name = '@{concat('lap_times',pipeline().parameters.season_year,'_',item().round)}';\n\n\nselect * from public.audit;",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_postgres",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "act_log_update_fail_lap_times",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "act_cpy_lap_timees",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": {
										"value": "update public.audit\nset status='failed',\nend_date = start_date + interval '@{activity('act_cpy_round_result').output.copyDuration} seconds'\nwhere job_name ='@{concat('lap_times',pipeline().parameters.season_year,'_',item().round)}';\n\n\nselect * from public.audit;",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_postgres",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "act_log_insert_pit_stops",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": {
										"value": "insert into public.audit (job_name,task_name,status,start_date,end_date) values ('@{concat('pit_stops',pipeline().parameters.season_year,'_',item().round)}','copy_act','In Progress','@{convertFromUtc(utcnow(),'India Standard Time')}','@{convertFromUtc(utcnow(),'India Standard Time')}');\n\nselect * from public.audit;",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_postgres",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "act_log_update_complete_pit_stops",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "act_cpy_pitstops",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": {
										"value": "update public.audit\nset status='completed', \nend_date = start_date + interval '@{activity('act_cpy_round_result').output.copyDuration} seconds'\nwhere job_name = '@{concat('pit_stops',pipeline().parameters.season_year,'_',item().round)}';\n\n\nselect * from public.audit;",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_postgres",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "act_log_update_fail_pit_stops",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "act_cpy_pitstops",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": {
										"value": "update public.audit\nset status='failed',\nend_date = start_date + interval '@{activity('act_cpy_round_result').output.copyDuration} seconds'\nwhere job_name ='@{concat('pit_stops',pipeline().parameters.season_year,'_',item().round)}';\n\n\nselect * from public.audit;",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_postgres",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "act_log_insert_qualifying",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": {
										"value": "insert into public.audit (job_name,task_name,status,start_date,end_date) values ('@{concat('qualifying',pipeline().parameters.season_year,'_',item().round)}','copy_act','In Progress','@{convertFromUtc(utcnow(),'India Standard Time')}','@{convertFromUtc(utcnow(),'India Standard Time')}');\n\nselect * from public.audit;",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_postgres",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "act_log_update_complete_qualifying",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "act_cpy_qualifying",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": {
										"value": "update public.audit\nset status='completed', \nend_date = start_date + interval '@{activity('act_cpy_round_result').output.copyDuration} seconds'\nwhere job_name = '@{concat('qualifying',pipeline().parameters.season_year,'_',item().round)}';\n\n\nselect * from public.audit;",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_postgres",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "act_log_update_fail_qualifying",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "act_cpy_qualifying",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzurePostgreSqlSource",
									"query": {
										"value": "update public.audit\nset status='failed',\nend_date = start_date + interval '@{activity('act_cpy_round_result').output.copyDuration} seconds'\nwhere job_name ='@{concat('qualifying',pipeline().parameters.season_year,'_',item().round)}';\n\n\nselect * from public.audit;",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_postgres",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						}
					]
				}
			},
			{
				"name": "act_look_up_races",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "ds_sink_json",
						"type": "DatasetReference",
						"parameters": {
							"ds_param_file_name": {
								"value": "@concat(concat('race_',pipeline().parameters.season_year),'.json')",
								"type": "Expression"
							},
							"ds_param_directory_path": {
								"value": "@concat('bronze/races/',formatDateTime(utcnow(),'yyyy-MM-dd'))",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			}
		],
		"parameters": {
			"season_year": {
				"type": "string",
				"defaultValue": "1950"
			}
		},
		"annotations": []
	}
}